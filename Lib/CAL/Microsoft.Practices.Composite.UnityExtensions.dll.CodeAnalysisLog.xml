<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 10.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="10.0">
 <Targets>
  <Target Name="C:\dev\citi\citivelocity\trunk\CAL\Composite.UnityExtensions\bin\Release\Microsoft.Practices.Composite.UnityExtensions.dll">
   <Modules>
    <Module Name="microsoft.practices.composite.unityextensions.dll">
     <Namespaces>
      <Namespace Name="Microsoft.Practices.Composite.UnityExtensions">
       <Types>
        <Type Name="UnityBootstrapper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2010-09-13 18:38:17Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\dev\citi\citivelocity\trunk\CAL\Composite.UnityExtensions" File="UnityBootstrapper.cs" Line="45">In method 'UnityBootstrapper.UnityBootstrapper()', call System.IDisposable.Dispose on object 'this.loggerFacade' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RegisterTypeIfMissing(System.Type,System.Type,System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2010-09-13 18:38:17Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\dev\citi\citivelocity\trunk\CAL\Composite.UnityExtensions" File="UnityBootstrapper.cs" Line="283">In method 'UnityBootstrapper.RegisterTypeIfMissing(Type, Type, bool)', call System.IDisposable.Dispose on object 'new ContainerControlledLifetimeManager()' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-09-13 18:38:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\dev\citi\citivelocity\trunk\CAL\Composite.UnityExtensions" File="UnityBootstrapper.cs" Line="274">In externally visible method 'UnityBootstrapper.RegisterTypeIfMissing(Type, Type, bool)', validate parameter 'fromType' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Run(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Microsoft.Practices.Composite.Logging.ILoggerFacade.Log(System.String,Microsoft.Practices.Composite.Logging.Category,Microsoft.Practices.Composite.Logging.Priority)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-09-13 18:38:17Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\dev\citi\citivelocity\trunk\CAL\Composite.UnityExtensions" File="UnityBootstrapper.cs" Line="114">Method 'UnityBootstrapper.Run(bool)' passes a literal string as parameter 'message' of a call to 'ILoggerFacade.Log(string, Category, Priority)'. Retrieve the following string(s) from a resource table instead: "Bootstrapper sequence completed".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\dev\citi\citivelocity\trunk\CAL\Composite.UnityExtensions" File="UnityBootstrapper.cs" Line="93">Method 'UnityBootstrapper.Run(bool)' passes a literal string as parameter 'message' of a call to 'ILoggerFacade.Log(string, Category, Priority)'. Retrieve the following string(s) from a resource table instead: "Configuring container".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\dev\citi\citivelocity\trunk\CAL\Composite.UnityExtensions" File="UnityBootstrapper.cs" Line="97">Method 'UnityBootstrapper.Run(bool)' passes a literal string as parameter 'message' of a call to 'ILoggerFacade.Log(string, Category, Priority)'. Retrieve the following string(s) from a resource table instead: "Configuring region adapters".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\dev\citi\citivelocity\trunk\CAL\Composite.UnityExtensions" File="UnityBootstrapper.cs" Line="85">Method 'UnityBootstrapper.Run(bool)' passes a literal string as parameter 'message' of a call to 'ILoggerFacade.Log(string, Category, Priority)'. Retrieve the following string(s) from a resource table instead: "Creating Unity container".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\dev\citi\citivelocity\trunk\CAL\Composite.UnityExtensions" File="UnityBootstrapper.cs" Line="103">Method 'UnityBootstrapper.Run(bool)' passes a literal string as parameter 'message' of a call to 'ILoggerFacade.Log(string, Category, Priority)'. Retrieve the following string(s) from a resource table instead: "Creating shell".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\dev\citi\citivelocity\trunk\CAL\Composite.UnityExtensions" File="UnityBootstrapper.cs" Line="111">Method 'UnityBootstrapper.Run(bool)' passes a literal string as parameter 'message' of a call to 'ILoggerFacade.Log(string, Category, Priority)'. Retrieve the following string(s) from a resource table instead: "Initializing modules".</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
